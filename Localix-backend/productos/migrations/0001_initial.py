# Generated by Django 5.2.4 on 2025-08-15 18:53

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('categorias', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Producto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(help_text='Código único de identificación del producto', max_length=50, verbose_name='SKU')),
                ('nombre', models.CharField(help_text='Nombre descriptivo para mostrar a clientes', max_length=200, verbose_name='Nombre del producto')),
                ('slug', models.SlugField(max_length=220, unique=True, verbose_name='Slug para URL')),
                ('imagen_principal', models.ImageField(blank=True, help_text='Imagen destacada del producto', null=True, upload_to='productos/', verbose_name='Imagen principal')),
                ('descripcion_corta', models.TextField(help_text='Breve descripción para listados y SEO', max_length=160, verbose_name='Descripción corta')),
                ('descripcion_larga', models.TextField(help_text='Descripción completa con características', verbose_name='Descripción detallada')),
                ('tipo', models.CharField(choices=[('fisico', 'Físico'), ('digital', 'Digital'), ('servicio', 'Servicio')], default='fisico', max_length=10, verbose_name='Tipo de producto')),
                ('estado', models.CharField(choices=[('borrador', 'Borrador'), ('publicado', 'Publicado'), ('agotado', 'Agotado'), ('descontinuado', 'Descontinuado')], default='borrador', max_length=13, verbose_name='Estado del producto')),
                ('precio', models.DecimalField(decimal_places=2, help_text='Precio actual de venta al público', max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Precio de venta')),
                ('precio_comparacion', models.DecimalField(blank=True, decimal_places=2, help_text='Precio tachado para mostrar descuentos (opcional)', max_digits=12, null=True, verbose_name='Precio original')),
                ('costo', models.DecimalField(decimal_places=2, help_text='Costo para cálculo de márgenes', max_digits=12, verbose_name='Costo')),
                ('gestion_stock', models.BooleanField(default=True, help_text='¿Este producto lleva control de stock?', verbose_name='Gestionar inventario')),
                ('stock', models.IntegerField(default=0, help_text='Cantidad disponible del producto', verbose_name='Stock total')),
                ('stock_minimo', models.IntegerField(default=5, help_text='Alerta cuando el stock total llegue a esta cantidad', verbose_name='Stock mínimo')),
                ('vendidos', models.IntegerField(default=0, editable=False, verbose_name='Unidades vendidas')),
                ('peso', models.DecimalField(decimal_places=3, default=0, help_text='Peso en kilogramos para cálculo de envío', max_digits=8, verbose_name='Peso (kg)')),
                ('dimensiones', models.CharField(blank=True, help_text='Ancho x Alto x Profundidad en cm (opcional)', max_length=50, verbose_name='Dimensiones')),
                ('meta_titulo', models.CharField(blank=True, help_text='Título para SEO (máx 70 caracteres)', max_length=70, verbose_name='Meta título')),
                ('meta_descripcion', models.TextField(blank=True, help_text='Descripción para SEO (máx 160 caracteres)', max_length=160, verbose_name='Meta descripción')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_publicacion', models.DateTimeField(blank=True, help_text='Cuándo será visible públicamente (opcional)', null=True, verbose_name='Fecha de publicación')),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('categoria', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='productos', to='categorias.categoriaproducto', verbose_name='Categoría principal')),
                ('usuario', models.ForeignKey(help_text='Usuario que posee este producto', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario propietario')),
            ],
            options={
                'verbose_name': 'Producto',
                'verbose_name_plural': 'Productos',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='ColorProducto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Ej: Rojo, Azul, Verde, etc.', max_length=100, verbose_name='Nombre del color')),
                ('hex_code', models.CharField(help_text='Código de color en formato #RRGGBB', max_length=7, verbose_name='Código hexadecimal')),
                ('stock', models.IntegerField(default=0, help_text='Cantidad disponible para este color específico', verbose_name='Stock del color')),
                ('orden', models.PositiveIntegerField(default=0, verbose_name='Orden de visualización')),
                ('activo', models.BooleanField(default=True, help_text='Indica si el color está disponible', verbose_name='Color activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('producto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='colores', to='productos.producto', verbose_name='Producto asociado')),
            ],
            options={
                'verbose_name': 'Color de producto',
                'verbose_name_plural': 'Colores de productos',
                'ordering': ['orden', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='VarianteProducto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Ej: Talla, Capacidad, etc.', max_length=100, verbose_name='Nombre de la variante')),
                ('valor', models.CharField(help_text='Ej: S, M, L, XL / 128GB, 256GB, etc.', max_length=100, verbose_name='Valor de la variante')),
                ('sku', models.CharField(help_text='Código único para esta combinación', max_length=50, unique=True, verbose_name='SKU específico')),
                ('precio_extra', models.DecimalField(decimal_places=2, default=0, help_text='Se suma al precio base del producto', max_digits=12, verbose_name='Precio adicional')),
                ('stock', models.IntegerField(default=0, help_text='Cantidad disponible para esta variante', verbose_name='Stock específico')),
                ('orden', models.PositiveIntegerField(default=0, verbose_name='Orden de visualización')),
                ('producto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variantes', to='productos.producto', verbose_name='Producto asociado')),
            ],
            options={
                'verbose_name': 'Variante de producto',
                'verbose_name_plural': 'Variantes de productos',
                'ordering': ['orden', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ImagenProducto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imagen', models.ImageField(help_text='Imagen del producto en este color', upload_to='productos/colores/', verbose_name='Imagen')),
                ('orden', models.PositiveIntegerField(default=0, verbose_name='Orden de visualización')),
                ('es_principal', models.BooleanField(default=False, help_text='Indica si es la imagen principal del color', verbose_name='Imagen principal')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imagenes', to='productos.colorproducto', verbose_name='Color asociado')),
            ],
            options={
                'verbose_name': 'Imagen de producto',
                'verbose_name_plural': 'Imágenes de productos',
                'ordering': ['color', 'orden', 'id'],
                'indexes': [models.Index(fields=['color'], name='productos_i_color_i_2acb03_idx'), models.Index(fields=['orden'], name='productos_i_orden_7a4439_idx'), models.Index(fields=['es_principal'], name='productos_i_es_prin_e029b4_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('orden__gte', 0)), name='orden_imagen_positivo')],
            },
        ),
        migrations.AddIndex(
            model_name='producto',
            index=models.Index(fields=['usuario', 'sku'], name='productos_p_usuario_7d974b_idx'),
        ),
        migrations.AddIndex(
            model_name='producto',
            index=models.Index(fields=['usuario', 'nombre'], name='productos_p_usuario_a9de3c_idx'),
        ),
        migrations.AddIndex(
            model_name='producto',
            index=models.Index(fields=['usuario', 'precio'], name='productos_p_usuario_ce8f7a_idx'),
        ),
        migrations.AddIndex(
            model_name='producto',
            index=models.Index(fields=['usuario', 'categoria'], name='productos_p_usuario_1d6380_idx'),
        ),
        migrations.AddIndex(
            model_name='producto',
            index=models.Index(fields=['usuario', 'estado'], name='productos_p_usuario_e93d81_idx'),
        ),
        migrations.AddConstraint(
            model_name='producto',
            constraint=models.CheckConstraint(condition=models.Q(('precio__gte', models.F('costo'))), name='precio_mayor_igual_costo'),
        ),
        migrations.AddConstraint(
            model_name='producto',
            constraint=models.CheckConstraint(condition=models.Q(('precio_comparacion__isnull', True), ('precio_comparacion__gt', models.F('precio')), _connector='OR'), name='precio_comparacion_mayor'),
        ),
        migrations.AddIndex(
            model_name='colorproducto',
            index=models.Index(fields=['producto'], name='productos_c_product_21b594_idx'),
        ),
        migrations.AddIndex(
            model_name='colorproducto',
            index=models.Index(fields=['nombre'], name='productos_c_nombre_fed12d_idx'),
        ),
        migrations.AddIndex(
            model_name='colorproducto',
            index=models.Index(fields=['activo'], name='productos_c_activo_d4334e_idx'),
        ),
        migrations.AddIndex(
            model_name='colorproducto',
            index=models.Index(fields=['stock'], name='productos_c_stock_dd104c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='colorproducto',
            unique_together={('producto', 'nombre')},
        ),
        migrations.AlterUniqueTogether(
            name='varianteproducto',
            unique_together={('producto', 'nombre', 'valor')},
        ),
    ]
