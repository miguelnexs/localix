#!/usr/bin/env python
"""
Script de diagn√≥stico para problemas con categor√≠as
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Backend.settings')
django.setup()

from categorias.models import CategoriaProducto
from django.utils.text import slugify
from django.db import connection

def test_database_connection():
    """Probar conexi√≥n a la base de datos"""
    print("üîç Probando conexi√≥n a la base de datos...")
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
        print("‚úÖ Conexi√≥n a la base de datos exitosa")
        return True
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n a la base de datos: {e}")
        return False

def test_model_operations():
    """Probar operaciones b√°sicas del modelo"""
    print("\nüîç Probando operaciones del modelo...")
    try:
        # Contar categor√≠as existentes
        count = CategoriaProducto.objects.count()
        print(f"‚úÖ Categor√≠as existentes: {count}")
        
        # Listar categor√≠as existentes
        categorias = CategoriaProducto.objects.all()[:5]
        print(f"‚úÖ Primeras {len(categorias)} categor√≠as:")
        for cat in categorias:
            print(f"   - {cat.nombre} (slug: {cat.slug})")
        
        return True
    except Exception as e:
        print(f"‚ùå Error en operaciones del modelo: {e}")
        return False

def test_slug_generation():
    """Probar generaci√≥n de slugs"""
    print("\nüîç Probando generaci√≥n de slugs...")
    try:
        test_names = ["General", "Test Category", "Categor√≠a de Prueba"]
        for name in test_names:
            slug = slugify(name)
            print(f"‚úÖ '{name}' -> '{slug}'")
        return True
    except Exception as e:
        print(f"‚ùå Error en generaci√≥n de slugs: {e}")
        return False

def test_category_creation():
    """Probar creaci√≥n de categor√≠a"""
    print("\nüîç Probando creaci√≥n de categor√≠a...")
    try:
        # Verificar si ya existe una categor√≠a "General"
        existing = CategoriaProducto.objects.filter(nombre__iexact='General').first()
        if existing:
            print(f"‚úÖ Categor√≠a 'General' ya existe: {existing.nombre} (ID: {existing.id})")
            return True
        
        # Crear categor√≠a de prueba
        categoria = CategoriaProducto.objects.create(
            nombre="General",
            descripcion="Categor√≠a general para productos sin clasificaci√≥n espec√≠fica",
            activa=True,
            orden=0
        )
        print(f"‚úÖ Categor√≠a creada exitosamente: {categoria.nombre} (ID: {categoria.id}, slug: {categoria.slug})")
        
        # Limpiar categor√≠a de prueba
        categoria.delete()
        print("‚úÖ Categor√≠a de prueba eliminada")
        return True
        
    except Exception as e:
        print(f"‚ùå Error creando categor√≠a: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False

def test_serializer():
    """Probar serializer"""
    print("\nüîç Probando serializer...")
    try:
        from categorias.serializers import CategoriaSerializer
        
        # Datos de prueba
        test_data = {
            'nombre': 'Test Category',
            'descripcion': 'Categor√≠a de prueba',
            'activa': True,
            'orden': 999
        }
        
        serializer = CategoriaSerializer(data=test_data)
        if serializer.is_valid():
            print("‚úÖ Serializer v√°lido")
            categoria = serializer.save()
            print(f"‚úÖ Categor√≠a creada via serializer: {categoria.nombre} (ID: {categoria.id})")
            
            # Limpiar
            categoria.delete()
            print("‚úÖ Categor√≠a de prueba eliminada")
            return True
        else:
            print(f"‚ùå Errores de validaci√≥n: {serializer.errors}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en serializer: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False

def main():
    """Funci√≥n principal de diagn√≥stico"""
    print("üöÄ Iniciando diagn√≥stico de categor√≠as...\n")
    
    tests = [
        ("Conexi√≥n a BD", test_database_connection),
        ("Operaciones del modelo", test_model_operations),
        ("Generaci√≥n de slugs", test_slug_generation),
        ("Creaci√≥n de categor√≠a", test_category_creation),
        ("Serializer", test_serializer),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Error en {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "="*50)
    print("üìä RESUMEN DE DIAGN√ìSTICO")
    print("="*50)
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{test_name}: {status}")
        if not result:
            all_passed = False
    
    print("\n" + "="*50)
    if all_passed:
        print("üéâ TODOS LOS TESTS PASARON - El sistema est√° funcionando correctamente")
    else:
        print("‚ö†Ô∏è ALGUNOS TESTS FALLARON - Revisar los errores arriba")
    print("="*50)

if __name__ == "__main__":
    main()
