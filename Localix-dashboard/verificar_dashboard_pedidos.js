// Script para verificar que la secci√≥n de pedidos en el dashboard est√© funcionando correctamente
// Copiar y pegar este c√≥digo en la consola del navegador (F12)

(function() {
  console.log('üîç VERIFICACI√ìN DE PEDIDOS EN EL DASHBOARD');
  console.log('=' * 50);
  
  // Funci√≥n para verificar la p√°gina actual
  function verificarPaginaActual() {
    console.log('üìã Verificando p√°gina actual...');
    
    const titulo = document.title;
    const url = window.location.pathname;
    const h1 = document.querySelector('h1');
    
    console.log(`   - T√≠tulo: "${titulo}"`);
    console.log(`   - URL: "${url}"`);
    console.log(`   - H1: "${h1?.textContent || 'No encontrado'}"`);
    
    const esDashboard = titulo.includes('Dashboard') || 
                       url.includes('dashboard') || 
                       url === '/' ||
                       h1?.textContent.includes('Dashboard');
    
    console.log(`   - Es dashboard: ${esDashboard ? '‚úÖ S√≠' : '‚ùå No'}`);
    
    return esDashboard;
  }
  
  // Funci√≥n para verificar la secci√≥n de pedidos
  function verificarSeccionPedidos() {
    console.log('\nüîç Verificando secci√≥n de pedidos...');
    
    // Buscar el t√≠tulo "Pedidos Recientes"
    const tituloPedidos = Array.from(document.querySelectorAll('h3')).find(h3 => 
      h3.textContent.includes('Pedidos Recientes')
    );
    
    if (!tituloPedidos) {
      console.log('‚ùå No se encontr√≥ la secci√≥n "Pedidos Recientes"');
      return false;
    }
    
    console.log('‚úÖ Secci√≥n "Pedidos Recientes" encontrada');
    
    // Buscar la tabla de pedidos
    const tablaPedidos = tituloPedidos.closest('.bg-theme-surface')?.querySelector('table');
    
    if (!tablaPedidos) {
      console.log('‚ùå No se encontr√≥ la tabla de pedidos');
      return false;
    }
    
    console.log('‚úÖ Tabla de pedidos encontrada');
    
    // Verificar filas de la tabla
    const filas = tablaPedidos.querySelectorAll('tbody tr');
    console.log(`üìä Filas de pedidos encontradas: ${filas.length}`);
    
    if (filas.length === 0) {
      console.log('‚ö†Ô∏è No hay pedidos para mostrar');
      
      // Verificar mensaje de "No hay pedidos recientes"
      const mensajeVacio = document.querySelector('h4');
      if (mensajeVacio && mensajeVacio.textContent.includes('No hay pedidos recientes')) {
        console.log('‚úÖ Mensaje de "No hay pedidos" mostrado correctamente');
      } else {
        console.log('‚ùå No se muestra mensaje de "No hay pedidos"');
      }
      
      return true;
    }
    
    // Verificar estructura de las filas
    filas.forEach((fila, index) => {
      const celdas = fila.querySelectorAll('td');
      console.log(`\nüîò Fila ${index + 1}:`);
      console.log(`   - Celdas encontradas: ${celdas.length}`);
      
      if (celdas.length >= 5) {
        const numeroPedido = celdas[0]?.textContent?.trim();
        const cliente = celdas[1]?.textContent?.trim();
        const fecha = celdas[2]?.textContent?.trim();
        const monto = celdas[3]?.textContent?.trim();
        const estado = celdas[4]?.textContent?.trim();
        
        console.log(`   - N√∫mero de pedido: "${numeroPedido}"`);
        console.log(`   - Cliente: "${cliente}"`);
        console.log(`   - Fecha: "${fecha}"`);
        console.log(`   - Monto: "${monto}"`);
        console.log(`   - Estado: "${estado}"`);
        
        // Verificar que los datos no est√©n vac√≠os
        if (numeroPedido && numeroPedido !== '#undefined') {
          console.log(`   ‚úÖ Datos v√°lidos`);
        } else {
          console.log(`   ‚ùå Datos inv√°lidos o vac√≠os`);
        }
      } else {
        console.log(`   ‚ùå Estructura de fila incorrecta`);
      }
    });
    
    return true;
  }
  
  // Funci√≥n para verificar el contador de pedidos
  function verificarContadorPedidos() {
    console.log('\nüîç Verificando contador de pedidos...');
    
    // Buscar el contador de "Total Pedidos"
    const contadores = Array.from(document.querySelectorAll('p')).filter(p => 
      p.textContent.includes('Total Pedidos')
    );
    
    if (contadores.length === 0) {
      console.log('‚ùå No se encontr√≥ el contador de "Total Pedidos"');
      return false;
    }
    
    contadores.forEach((contador, index) => {
      const contenedor = contador.closest('.bg-theme-surface');
      const valor = contenedor?.querySelector('.text-2xl')?.textContent;
      
      console.log(`üìä Contador ${index + 1}:`);
      console.log(`   - Texto: "${contador.textContent}"`);
      console.log(`   - Valor: "${valor}"`);
      
      if (valor && valor !== '0') {
        console.log(`   ‚úÖ Contador con valor v√°lido`);
      } else if (valor === '0') {
        console.log(`   ‚ö†Ô∏è Contador muestra 0 (puede ser normal si no hay pedidos)`);
      } else {
        console.log(`   ‚ùå Contador sin valor`);
      }
    });
    
    return true;
  }
  
  // Funci√≥n para verificar botones de acci√≥n
  function verificarBotonesAccion() {
    console.log('\nüîç Verificando botones de acci√≥n...');
    
    // Buscar bot√≥n "Ver todos" en la secci√≥n de pedidos
    const botonVerTodos = Array.from(document.querySelectorAll('button')).find(button => 
      button.textContent.includes('Ver todos')
    );
    
    if (botonVerTodos) {
      console.log('‚úÖ Bot√≥n "Ver todos" encontrado');
      
      // Verificar que tenga el evento onClick
      const tieneOnClick = botonVerTodos.onclick !== null;
      console.log(`   - Tiene onClick: ${tieneOnClick ? '‚úÖ S√≠' : '‚ùå No'}`);
      
      // Verificar que est√© habilitado
      const habilitado = !botonVerTodos.disabled;
      console.log(`   - Habilitado: ${habilitado ? '‚úÖ S√≠' : '‚ùå No'}`);
    } else {
      console.log('‚ùå Bot√≥n "Ver todos" no encontrado');
    }
    
    // Buscar bot√≥n de acci√≥n r√°pida "Pedidos"
    const botonPedidos = Array.from(document.querySelectorAll('button')).find(button => 
      button.textContent.includes('Pedidos')
    );
    
    if (botonPedidos) {
      console.log('‚úÖ Bot√≥n de acci√≥n r√°pida "Pedidos" encontrado');
      
      const tieneOnClick = botonPedidos.onclick !== null;
      console.log(`   - Tiene onClick: ${tieneOnClick ? '‚úÖ S√≠' : '‚ùå No'}`);
      
      const habilitado = !botonPedidos.disabled;
      console.log(`   - Habilitado: ${habilitado ? '‚úÖ S√≠' : '‚ùå No'}`);
    } else {
      console.log('‚ùå Bot√≥n de acci√≥n r√°pida "Pedidos" no encontrado');
    }
  }
  
  // Funci√≥n para verificar datos del hook
  function verificarDatosHook() {
    console.log('\nüîç Verificando datos del hook...');
    
    // Intentar acceder a los datos del dashboard desde la consola
    console.log('üí° Para verificar los datos del hook manualmente:');
    console.log('   1. Abre las herramientas de desarrollador (F12)');
    console.log('   2. Ve a la pesta√±a "Components" (React DevTools)');
    console.log('   3. Busca el componente DashboardPage');
    console.log('   4. Verifica las props y el estado');
    console.log('   5. Busca dashboardData.pedidosRecientes');
    
    // Verificar si hay errores en la consola
    console.log('\nüîç Verificando errores en la consola...');
    console.log('   - Revisa si hay errores relacionados con pedidos');
    console.log('   - Verifica si hay errores de red (Network tab)');
    console.log('   - Busca errores de API en la consola');
  }
  
  // Funci√≥n para mostrar resumen
  function mostrarResumen() {
    console.log('\nüìä RESUMEN DE LA VERIFICACI√ìN');
    console.log('=' * 30);
    
    const esDashboard = verificarPaginaActual();
    
    if (!esDashboard) {
      console.log('‚ùå No est√°s en el dashboard');
      console.log('üîß Navega al dashboard y ejecuta este script nuevamente');
      return;
    }
    
    const seccionPedidosOk = verificarSeccionPedidos();
    const contadorPedidosOk = verificarContadorPedidos();
    verificarBotonesAccion();
    verificarDatosHook();
    
    if (seccionPedidosOk && contadorPedidosOk) {
      console.log('\n‚úÖ √âXITO: La secci√≥n de pedidos est√° funcionando correctamente');
      console.log('‚úÖ El dashboard est√° mostrando los pedidos correctamente');
    } else {
      console.log('\n‚ö†Ô∏è PROBLEMA: Hay problemas con la secci√≥n de pedidos');
      console.log('üîß Verificar la implementaci√≥n del hook useDashboardOptimized');
    }
    
    console.log('\nüí° Recomendaciones:');
    console.log('   - Verificar que el endpoint /pedidos/pedidos/ est√© funcionando');
    console.log('   - Verificar que los datos se est√©n cargando correctamente');
    console.log('   - Probar la navegaci√≥n a la p√°gina de pedidos');
    console.log('   - Verificar que no haya errores de CORS o autenticaci√≥n');
  }
  
  // Funci√≥n para verificar endpoint de pedidos
  function verificarEndpointPedidos() {
    console.log('\nüîç Verificando endpoint de pedidos...');
    
    console.log('üí° Para verificar el endpoint manualmente:');
    console.log('   1. Abre las herramientas de desarrollador (F12)');
    console.log('   2. Ve a la pesta√±a "Network"');
    console.log('   3. Recarga la p√°gina');
    console.log('   4. Busca la petici√≥n a /pedidos/pedidos/');
    console.log('   5. Verifica que el status sea 200');
    console.log('   6. Verifica que la respuesta contenga datos de pedidos');
    
    // Funci√≥n para hacer la petici√≥n directamente
    window.probarEndpointPedidos = async function() {
      try {
        console.log('üß™ Probando endpoint de pedidos...');
        const response = await fetch('/api/pedidos/pedidos/', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('access_token')}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          console.log('‚úÖ Endpoint funcionando:', data);
          return data;
        } else {
          console.log('‚ùå Error en endpoint:', response.status, response.statusText);
          return null;
        }
      } catch (error) {
        console.log('‚ùå Error probando endpoint:', error);
        return null;
      }
    };
    
    console.log('\nüí° Para probar el endpoint ejecuta:');
    console.log('   probarEndpointPedidos()');
  }
  
  // Ejecutar verificaciones
  verificarPaginaActual();
  verificarSeccionPedidos();
  verificarContadorPedidos();
  verificarBotonesAccion();
  verificarDatosHook();
  verificarEndpointPedidos();
  mostrarResumen();
  
  // Funci√≥n para verificaci√≥n r√°pida
  window.verificarDashboardPedidos = function() {
    console.log('\nüöÄ Verificaci√≥n r√°pida de pedidos en dashboard...');
    verificarSeccionPedidos();
    verificarContadorPedidos();
  };
  
  console.log('\nüí° Funciones disponibles:');
  console.log('   - verificarSeccionPedidos() - Verifica la secci√≥n de pedidos');
  console.log('   - verificarContadorPedidos() - Verifica el contador');
  console.log('   - verificarBotonesAccion() - Verifica los botones');
  console.log('   - verificarDatosHook() - Verifica los datos del hook');
  console.log('   - verificarEndpointPedidos() - Verifica el endpoint');
  console.log('   - mostrarResumen() - Muestra resumen completo');
  console.log('   - verificarDashboardPedidos() - Verificaci√≥n r√°pida');
  console.log('   - probarEndpointPedidos() - Prueba el endpoint directamente');
  
})(); 