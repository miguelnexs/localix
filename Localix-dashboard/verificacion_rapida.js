// Script de verificaci√≥n r√°pida para la API de clientes
// Copiar y pegar este c√≥digo en la consola del navegador (F12)

(function() {
  console.log('üîç VERIFICACI√ìN R√ÅPIDA DE LA API DE CLIENTES');
  console.log('=' * 50);
  
  let problemas = [];
  let soluciones = [];
  
  // 1. Verificar window.clientesAPI
  console.log('1. Verificando window.clientesAPI...');
  if (window.clientesAPI) {
    console.log('‚úÖ window.clientesAPI est√° disponible');
    
    // Verificar m√©todos espec√≠ficos
    const metodos = ['obtenerTodos', 'crear', 'actualizar', 'eliminar', 'buscar'];
    const metodosDisponibles = metodos.filter(metodo => typeof window.clientesAPI[metodo] === 'function');
    
    console.log('‚úÖ M√©todos disponibles:', metodosDisponibles);
    
    if (metodosDisponibles.length === metodos.length) {
      console.log('‚úÖ Todos los m√©todos est√°n disponibles');
    } else {
      const faltantes = metodos.filter(m => !metodosDisponibles.includes(m));
      console.log('‚ùå M√©todos faltantes:', faltantes);
      problemas.push(`Faltan m√©todos: ${faltantes.join(', ')}`);
      soluciones.push('Reiniciar la aplicaci√≥n Electron');
    }
  } else {
    console.log('‚ùå window.clientesAPI NO est√° disponible');
    problemas.push('window.clientesAPI no est√° disponible');
    soluciones.push('Reiniciar la aplicaci√≥n Electron');
  }
  
  // 2. Verificar otras APIs
  console.log('\n2. Verificando otras APIs...');
  const apis = {
    'window.electronAPI': window.electronAPI,
    'window.ventasAPI': window.ventasAPI,
    'window.pedidosAPI': window.pedidosAPI
  };
  
  Object.entries(apis).forEach(([nombre, api]) => {
    if (api) {
      console.log(`${nombre}: ‚úÖ Disponible`);
    } else {
      console.log(`${nombre}: ‚ùå No disponible`);
      problemas.push(`${nombre} no est√° disponible`);
    }
  });
  
  // 3. Verificar localStorage
  console.log('\n3. Verificando localStorage...');
  const token = localStorage.getItem('access_token');
  if (token) {
    console.log('‚úÖ Token de acceso presente');
  } else {
    console.log('‚ùå No hay token de acceso');
    problemas.push('No hay token de autenticaci√≥n');
    soluciones.push('Iniciar sesi√≥n nuevamente');
  }
  
  // 4. Probar conexi√≥n al servidor
  console.log('\n4. Probando conexi√≥n al servidor...');
  fetch('http://localhost:8000/api/')
    .then(response => {
      if (response.ok) {
        console.log('‚úÖ Servidor respondiendo correctamente');
      } else {
        console.log('‚ùå Servidor respondi√≥ con error:', response.status);
        problemas.push(`Servidor respondi√≥ con error ${response.status}`);
        soluciones.push('Verificar que Django est√© ejecut√°ndose');
      }
    })
    .catch(error => {
      console.log('‚ùå Error conectando al servidor:', error.message);
      problemas.push('No se puede conectar al servidor');
      soluciones.push('Iniciar el servidor Django');
    });
  
  // 5. Funci√≥n para probar la API
  async function probarAPI() {
    console.log('\n5. Probando API de clientes...');
    
    if (!window.clientesAPI) {
      console.log('‚ùå No se puede probar - window.clientesAPI no est√° disponible');
      return;
    }
    
    try {
      // Probar obtener clientes
      console.log('üîç Probando obtenerTodos...');
      const result = await window.clientesAPI.obtenerTodos();
      console.log('‚úÖ Resultado obtenerTodos:', result);
      
      if (result && result.success) {
        console.log('‚úÖ API de clientes funcionando correctamente');
      } else {
        console.log('‚ùå Error en obtenerTodos:', result?.error);
        problemas.push('Error en API obtenerTodos');
        soluciones.push('Verificar logs del backend');
      }
      
    } catch (error) {
      console.log('‚ùå Error probando API:', error);
      problemas.push('Error al probar API');
      soluciones.push('Reiniciar aplicaci√≥n y verificar logs');
    }
  }
  
  // 6. Funci√≥n para mostrar resumen
  function mostrarResumen() {
    console.log('\nüìä RESUMEN DEL DIAGN√ìSTICO');
    console.log('=' * 30);
    
    if (problemas.length === 0) {
      console.log('‚úÖ No se detectaron problemas evidentes');
      console.log('üí° Si sigues teniendo problemas, verifica:');
      console.log('   - Los logs del servidor Django');
      console.log('   - Los logs de la aplicaci√≥n Electron');
      console.log('   - La configuraci√≥n de la base de datos');
    } else {
      console.log('‚ùå Problemas detectados:');
      problemas.forEach((problema, index) => {
        console.log(`   ${index + 1}. ${problema}`);
        if (soluciones[index]) {
          console.log(`      Soluci√≥n: ${soluciones[index]}`);
        }
      });
      
      console.log('\nüîß SOLUCIONES RECOMENDADAS:');
      console.log('   1. Reiniciar la aplicaci√≥n Electron');
      console.log('   2. Verificar que el servidor Django est√© ejecut√°ndose');
      console.log('   3. Verificar que los handlers est√©n registrados');
      console.log('   4. Iniciar sesi√≥n nuevamente');
    }
  }
  
  // Ejecutar pruebas
  setTimeout(() => {
    probarAPI();
    setTimeout(mostrarResumen, 1000);
  }, 1000);
  
  // Funci√≥n para reiniciar manualmente
  window.reiniciarAplicacion = function() {
    console.log('üîÑ Para reiniciar la aplicaci√≥n:');
    console.log('   1. Cerrar completamente la aplicaci√≥n Electron');
    console.log('   2. Esperar 5 segundos');
    console.log('   3. Volver a abrir la aplicaci√≥n');
    console.log('   4. Ejecutar este script nuevamente');
  };
  
  // Funci√≥n para limpiar cache
  window.limpiarCache = function() {
    console.log('üßπ Para limpiar cache:');
    console.log('   1. Cerrar la aplicaci√≥n');
    console.log('   2. Eliminar carpeta: %APPDATA%\\Localix (Windows)');
    console.log('   3. Reiniciar la aplicaci√≥n');
  };
  
  console.log('\nüí° Funciones disponibles:');
  console.log('   - probarAPI() - Probar la API de clientes');
  console.log('   - mostrarResumen() - Mostrar resumen del diagn√≥stico');
  console.log('   - reiniciarAplicacion() - Instrucciones de reinicio');
  console.log('   - limpiarCache() - Instrucciones de limpieza de cache');
  
})(); 