// Script para verificar que solo hay un bot√≥n de recargar en la p√°gina de clientes
// Copiar y pegar este c√≥digo en la consola del navegador (F12)

(function() {
  console.log('üîç VERIFICACI√ìN DE BOTONES DE RECARGAR');
  console.log('=' * 50);
  
  // Funci√≥n para verificar botones de recargar
  function verificarBotonesRecargar() {
    console.log('üìã Buscando botones de recargar...');
    
    // Buscar todos los botones que contengan "Recargar" o el √≠cono RefreshCw
    const botonesRecargar = [];
    
    // Buscar por texto
    const botonesPorTexto = Array.from(document.querySelectorAll('button')).filter(button => {
      const texto = button.textContent.toLowerCase();
      return texto.includes('recargar') || texto.includes('refresh');
    });
    
    // Buscar por √≠cono RefreshCw
    const botonesPorIcono = Array.from(document.querySelectorAll('button')).filter(button => {
      const iconos = button.querySelectorAll('svg');
      return Array.from(iconos).some(icono => {
        const clases = icono.className.baseVal || '';
        return clases.includes('refresh') || clases.includes('RefreshCw');
      });
    });
    
    // Combinar y eliminar duplicados
    const todosLosBotones = [...botonesPorTexto, ...botonesPorIcono];
    const botonesUnicos = todosLosBotones.filter((boton, index, array) => 
      array.indexOf(boton) === index
    );
    
    console.log(`‚úÖ Total de botones de recargar encontrados: ${botonesUnicos.length}`);
    
    if (botonesUnicos.length === 0) {
      console.log('‚ùå No se encontraron botones de recargar');
      return;
    }
    
    if (botonesUnicos.length === 1) {
      console.log('‚úÖ Perfecto: Solo hay un bot√≥n de recargar');
    } else if (botonesUnicos.length > 1) {
      console.log(`‚ö†Ô∏è ADVERTENCIA: Se encontraron ${botonesUnicos.length} botones de recargar`);
    }
    
    // Mostrar detalles de cada bot√≥n
    botonesUnicos.forEach((boton, index) => {
      console.log(`\nüîò Bot√≥n ${index + 1}:`);
      console.log(`   - Texto: "${boton.textContent.trim()}"`);
      console.log(`   - Clases: "${boton.className}"`);
      console.log(`   - Posici√≥n: ${boton.offsetTop}, ${boton.offsetLeft}`);
      
      // Verificar si est√° visible
      const rect = boton.getBoundingClientRect();
      const visible = rect.width > 0 && rect.height > 0;
      console.log(`   - Visible: ${visible ? '‚úÖ S√≠' : '‚ùå No'}`);
      
      // Verificar si est√° habilitado
      const habilitado = !boton.disabled;
      console.log(`   - Habilitado: ${habilitado ? '‚úÖ S√≠' : '‚ùå No'}`);
    });
    
    return botonesUnicos;
  }
  
  // Funci√≥n para verificar la funcionalidad del bot√≥n
  function verificarFuncionalidad() {
    console.log('\nüîç Verificando funcionalidad del bot√≥n de recargar...');
    
    const botones = verificarBotonesRecargar();
    
    if (!botones || botones.length === 0) {
      console.log('‚ùå No hay botones para verificar');
      return;
    }
    
    const boton = botones[0]; // Tomar el primer bot√≥n
    
    console.log('\nüß™ Probando funcionalidad:');
    console.log('1. Verificando que el bot√≥n tenga el evento onClick...');
    
    // Verificar si tiene el evento onClick
    const tieneOnClick = boton.onclick !== null || boton.getAttribute('onclick');
    console.log(`   - Tiene onClick: ${tieneOnClick ? '‚úÖ S√≠' : '‚ùå No'}`);
    
    // Verificar si est√° en el contexto correcto
    const estaEnPaginaClientes = window.location.pathname.includes('clientes') || 
                                 document.title.includes('Clientes') ||
                                 document.querySelector('h1')?.textContent.includes('Clientes');
    console.log(`   - Est√° en p√°gina de clientes: ${estaEnPaginaClientes ? '‚úÖ S√≠' : '‚ùå No'}`);
    
    console.log('\nüí° Para probar manualmente:');
    console.log('1. Haz clic en el bot√≥n de recargar');
    console.log('2. Verifica que los datos se actualicen');
    console.log('3. Verifica que el √≠cono gire durante la carga');
  }
  
  // Funci√≥n para verificar el dise√±o
  function verificarDiseno() {
    console.log('\nüé® Verificando dise√±o del bot√≥n...');
    
    const botones = verificarBotonesRecargar();
    
    if (!botones || botones.length === 0) {
      console.log('‚ùå No hay botones para verificar');
      return;
    }
    
    const boton = botones[0];
    
    console.log('üìã An√°lisis de dise√±o:');
    
    // Verificar clases CSS
    const clases = boton.className.split(' ');
    console.log(`   - Clases CSS: ${clases.join(', ')}`);
    
    // Verificar si tiene estilos de hover
    const tieneHover = clases.some(clase => clase.includes('hover'));
    console.log(`   - Tiene efectos hover: ${tieneHover ? '‚úÖ S√≠' : '‚ùå No'}`);
    
    // Verificar si tiene transiciones
    const tieneTransiciones = clases.some(clase => clase.includes('transition'));
    console.log(`   - Tiene transiciones: ${tieneTransiciones ? '‚úÖ S√≠' : '‚ùå No'}`);
    
    // Verificar √≠cono
    const icono = boton.querySelector('svg');
    if (icono) {
      console.log(`   - √çcono presente: ‚úÖ S√≠`);
      console.log(`   - Tama√±o del √≠cono: ${icono.getAttribute('size') || 'no especificado'}`);
    } else {
      console.log(`   - √çcono presente: ‚ùå No`);
    }
    
    // Verificar texto
    const texto = boton.textContent.trim();
    console.log(`   - Texto del bot√≥n: "${texto}"`);
  }
  
  // Funci√≥n para mostrar resumen
  function mostrarResumen() {
    console.log('\nüìä RESUMEN DE LA VERIFICACI√ìN');
    console.log('=' * 30);
    
    const botones = verificarBotonesRecargar();
    
    if (!botones || botones.length === 0) {
      console.log('‚ùå PROBLEMA: No se encontraron botones de recargar');
      console.log('üîß Soluci√≥n: Verificar que la p√°gina est√© cargada correctamente');
    } else if (botones.length === 1) {
      console.log('‚úÖ √âXITO: Solo hay un bot√≥n de recargar');
      console.log('‚úÖ El problema de duplicaci√≥n ha sido solucionado');
    } else {
      console.log(`‚ö†Ô∏è PROBLEMA: Se encontraron ${botones.length} botones de recargar`);
      console.log('üîß Soluci√≥n: Eliminar los botones duplicados');
    }
    
    console.log('\nüí° Recomendaciones:');
    console.log('   - Mantener solo un bot√≥n de recargar por p√°gina');
    console.log('   - Asegurar que el bot√≥n est√© en una ubicaci√≥n l√≥gica');
    console.log('   - Verificar que la funcionalidad sea consistente');
  }
  
  // Ejecutar verificaciones
  verificarBotonesRecargar();
  verificarFuncionalidad();
  verificarDiseno();
  mostrarResumen();
  
  // Funci√≥n para verificaci√≥n r√°pida
  window.verificarRecargar = function() {
    console.log('\nüöÄ Verificaci√≥n r√°pida de botones de recargar...');
    verificarBotonesRecargar();
  };
  
  console.log('\nüí° Funciones disponibles:');
  console.log('   - verificarBotonesRecargar() - Cuenta los botones de recargar');
  console.log('   - verificarFuncionalidad() - Verifica la funcionalidad');
  console.log('   - verificarDiseno() - Analiza el dise√±o');
  console.log('   - mostrarResumen() - Muestra resumen completo');
  console.log('   - verificarRecargar() - Verificaci√≥n r√°pida');
  
})(); 